<?php
/**
 * InlineObject4
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * The version of the OpenAPI document: 6.4.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject4 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineObject4 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_object_4';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'recipients' => 'array<string,string>',
        'sales_channel_id' => 'string',
        'content_html' => 'string',
        'content_plain' => 'string',
        'subject' => 'string',
        'sender_name' => 'string',
        'sender_email' => 'string',
        'media_ids' => 'string[]',
        'bin_attachments' => '\OpenAPI\Client\Model\ActionMailTemplateSendBinAttachments[]',
        'recipients_bcc' => 'array<string,string>',
        'recipients_cc' => 'array<string,string>',
        'reply_to' => 'array<string,string>',
        'return_path' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'recipients' => null,
        'sales_channel_id' => null,
        'content_html' => null,
        'content_plain' => null,
        'subject' => null,
        'sender_name' => null,
        'sender_email' => null,
        'media_ids' => null,
        'bin_attachments' => null,
        'recipients_bcc' => null,
        'recipients_cc' => null,
        'reply_to' => null,
        'return_path' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recipients' => 'recipients',
        'sales_channel_id' => 'salesChannelId',
        'content_html' => 'contentHtml',
        'content_plain' => 'contentPlain',
        'subject' => 'subject',
        'sender_name' => 'senderName',
        'sender_email' => 'senderEmail',
        'media_ids' => 'mediaIds',
        'bin_attachments' => 'binAttachments',
        'recipients_bcc' => 'recipientsBcc',
        'recipients_cc' => 'recipientsCc',
        'reply_to' => 'replyTo',
        'return_path' => 'returnPath'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recipients' => 'setRecipients',
        'sales_channel_id' => 'setSalesChannelId',
        'content_html' => 'setContentHtml',
        'content_plain' => 'setContentPlain',
        'subject' => 'setSubject',
        'sender_name' => 'setSenderName',
        'sender_email' => 'setSenderEmail',
        'media_ids' => 'setMediaIds',
        'bin_attachments' => 'setBinAttachments',
        'recipients_bcc' => 'setRecipientsBcc',
        'recipients_cc' => 'setRecipientsCc',
        'reply_to' => 'setReplyTo',
        'return_path' => 'setReturnPath'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recipients' => 'getRecipients',
        'sales_channel_id' => 'getSalesChannelId',
        'content_html' => 'getContentHtml',
        'content_plain' => 'getContentPlain',
        'subject' => 'getSubject',
        'sender_name' => 'getSenderName',
        'sender_email' => 'getSenderEmail',
        'media_ids' => 'getMediaIds',
        'bin_attachments' => 'getBinAttachments',
        'recipients_bcc' => 'getRecipientsBcc',
        'recipients_cc' => 'getRecipientsCc',
        'reply_to' => 'getReplyTo',
        'return_path' => 'getReturnPath'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recipients'] = $data['recipients'] ?? null;
        $this->container['sales_channel_id'] = $data['sales_channel_id'] ?? null;
        $this->container['content_html'] = $data['content_html'] ?? null;
        $this->container['content_plain'] = $data['content_plain'] ?? null;
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['sender_name'] = $data['sender_name'] ?? null;
        $this->container['sender_email'] = $data['sender_email'] ?? null;
        $this->container['media_ids'] = $data['media_ids'] ?? null;
        $this->container['bin_attachments'] = $data['bin_attachments'] ?? null;
        $this->container['recipients_bcc'] = $data['recipients_bcc'] ?? null;
        $this->container['recipients_cc'] = $data['recipients_cc'] ?? null;
        $this->container['reply_to'] = $data['reply_to'] ?? null;
        $this->container['return_path'] = $data['return_path'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recipients'] === null) {
            $invalidProperties[] = "'recipients' can't be null";
        }
        if ($this->container['sales_channel_id'] === null) {
            $invalidProperties[] = "'sales_channel_id' can't be null";
        }
        if (!preg_match("/^[0-9a-f]{32}$/", $this->container['sales_channel_id'])) {
            $invalidProperties[] = "invalid value for 'sales_channel_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if ($this->container['content_html'] === null) {
            $invalidProperties[] = "'content_html' can't be null";
        }
        if ($this->container['content_plain'] === null) {
            $invalidProperties[] = "'content_plain' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['sender_name'] === null) {
            $invalidProperties[] = "'sender_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recipients
     *
     * @return array<string,string>
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param array<string,string> $recipients A list of recipients with name and mail address.
     *
     * @return self
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets sales_channel_id
     *
     * @return string
     */
    public function getSalesChannelId()
    {
        return $this->container['sales_channel_id'];
    }

    /**
     * Sets sales_channel_id
     *
     * @param string $sales_channel_id Identifier of the sales channel from which the mail should be send.
     *
     * @return self
     */
    public function setSalesChannelId($sales_channel_id)
    {

        if ((!preg_match("/^[0-9a-f]{32}$/", $sales_channel_id))) {
            throw new \InvalidArgumentException("invalid value for $sales_channel_id when calling InlineObject4., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['sales_channel_id'] = $sales_channel_id;

        return $this;
    }

    /**
     * Gets content_html
     *
     * @return string
     */
    public function getContentHtml()
    {
        return $this->container['content_html'];
    }

    /**
     * Sets content_html
     *
     * @param string $content_html The content of the mail in HTML format.
     *
     * @return self
     */
    public function setContentHtml($content_html)
    {
        $this->container['content_html'] = $content_html;

        return $this;
    }

    /**
     * Gets content_plain
     *
     * @return string
     */
    public function getContentPlain()
    {
        return $this->container['content_plain'];
    }

    /**
     * Sets content_plain
     *
     * @param string $content_plain The content of the mail as plain text.
     *
     * @return self
     */
    public function setContentPlain($content_plain)
    {
        $this->container['content_plain'] = $content_plain;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of the mail.
     *
     * @return self
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string $sender_name Name of the sender.
     *
     * @return self
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets sender_email
     *
     * @return string|null
     */
    public function getSenderEmail()
    {
        return $this->container['sender_email'];
    }

    /**
     * Sets sender_email
     *
     * @param string|null $sender_email Mail address of the sender. If not set, `core.basicInformation.email` or `core.mailerSettings.senderAddress` will be used from the shop configuration.
     *
     * @return self
     */
    public function setSenderEmail($sender_email)
    {
        $this->container['sender_email'] = $sender_email;

        return $this;
    }

    /**
     * Gets media_ids
     *
     * @return string[]|null
     */
    public function getMediaIds()
    {
        return $this->container['media_ids'];
    }

    /**
     * Sets media_ids
     *
     * @param string[]|null $media_ids List of media identifiers which should be attached to the mail.
     *
     * @return self
     */
    public function setMediaIds($media_ids)
    {
        $this->container['media_ids'] = $media_ids;

        return $this;
    }

    /**
     * Gets bin_attachments
     *
     * @return \OpenAPI\Client\Model\ActionMailTemplateSendBinAttachments[]|null
     */
    public function getBinAttachments()
    {
        return $this->container['bin_attachments'];
    }

    /**
     * Sets bin_attachments
     *
     * @param \OpenAPI\Client\Model\ActionMailTemplateSendBinAttachments[]|null $bin_attachments A list of binary attachments which should be added to the mail.
     *
     * @return self
     */
    public function setBinAttachments($bin_attachments)
    {
        $this->container['bin_attachments'] = $bin_attachments;

        return $this;
    }

    /**
     * Gets recipients_bcc
     *
     * @return array<string,string>|null
     */
    public function getRecipientsBcc()
    {
        return $this->container['recipients_bcc'];
    }

    /**
     * Sets recipients_bcc
     *
     * @param array<string,string>|null $recipients_bcc A list of recipients with name and mail address to be set in BCC.
     *
     * @return self
     */
    public function setRecipientsBcc($recipients_bcc)
    {
        $this->container['recipients_bcc'] = $recipients_bcc;

        return $this;
    }

    /**
     * Gets recipients_cc
     *
     * @return array<string,string>|null
     */
    public function getRecipientsCc()
    {
        return $this->container['recipients_cc'];
    }

    /**
     * Sets recipients_cc
     *
     * @param array<string,string>|null $recipients_cc A list of recipients with name and mail address to be set in CC.
     *
     * @return self
     */
    public function setRecipientsCc($recipients_cc)
    {
        $this->container['recipients_cc'] = $recipients_cc;

        return $this;
    }

    /**
     * Gets reply_to
     *
     * @return array<string,string>|null
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     *
     * @param array<string,string>|null $reply_to A list of mail addresses with name and mail address to be set in reply to.
     *
     * @return self
     */
    public function setReplyTo($reply_to)
    {
        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets return_path
     *
     * @return array<string,string>|null
     */
    public function getReturnPath()
    {
        return $this->container['return_path'];
    }

    /**
     * Sets return_path
     *
     * @param array<string,string>|null $return_path A list of mail addresses with name and mail address to be set in return path.
     *
     * @return self
     */
    public function setReturnPath($return_path)
    {
        $this->container['return_path'] = $return_path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


