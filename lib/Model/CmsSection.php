<?php
/**
 * CmsSection
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * The version of the OpenAPI document: 6.4.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CmsSection Class Doc Comment
 *
 * @category Class
 * @description Added since version: 6.0.0.0
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CmsSection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CmsSection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'position' => 'int',
        'type' => 'string',
        'locked' => 'bool',
        'name' => 'string',
        'sizing_mode' => 'string',
        'mobile_behavior' => 'string',
        'background_color' => 'string',
        'background_media_id' => 'string',
        'background_media_mode' => 'string',
        'css_class' => 'string',
        'page_id' => 'string',
        'custom_fields' => 'object',
        'version_id' => 'string',
        'cms_page_version_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'page' => '\OpenAPI\Client\Model\CmsPage',
        'background_media' => '\OpenAPI\Client\Model\Media',
        'blocks' => '\OpenAPI\Client\Model\CmsBlock'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'position' => 'int64',
        'type' => null,
        'locked' => null,
        'name' => null,
        'sizing_mode' => null,
        'mobile_behavior' => null,
        'background_color' => null,
        'background_media_id' => null,
        'background_media_mode' => null,
        'css_class' => null,
        'page_id' => null,
        'custom_fields' => null,
        'version_id' => null,
        'cms_page_version_id' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'page' => null,
        'background_media' => null,
        'blocks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'position' => 'position',
        'type' => 'type',
        'locked' => 'locked',
        'name' => 'name',
        'sizing_mode' => 'sizingMode',
        'mobile_behavior' => 'mobileBehavior',
        'background_color' => 'backgroundColor',
        'background_media_id' => 'backgroundMediaId',
        'background_media_mode' => 'backgroundMediaMode',
        'css_class' => 'cssClass',
        'page_id' => 'pageId',
        'custom_fields' => 'customFields',
        'version_id' => 'versionId',
        'cms_page_version_id' => 'cmsPageVersionId',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'page' => 'page',
        'background_media' => 'backgroundMedia',
        'blocks' => 'blocks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'position' => 'setPosition',
        'type' => 'setType',
        'locked' => 'setLocked',
        'name' => 'setName',
        'sizing_mode' => 'setSizingMode',
        'mobile_behavior' => 'setMobileBehavior',
        'background_color' => 'setBackgroundColor',
        'background_media_id' => 'setBackgroundMediaId',
        'background_media_mode' => 'setBackgroundMediaMode',
        'css_class' => 'setCssClass',
        'page_id' => 'setPageId',
        'custom_fields' => 'setCustomFields',
        'version_id' => 'setVersionId',
        'cms_page_version_id' => 'setCmsPageVersionId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'page' => 'setPage',
        'background_media' => 'setBackgroundMedia',
        'blocks' => 'setBlocks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'position' => 'getPosition',
        'type' => 'getType',
        'locked' => 'getLocked',
        'name' => 'getName',
        'sizing_mode' => 'getSizingMode',
        'mobile_behavior' => 'getMobileBehavior',
        'background_color' => 'getBackgroundColor',
        'background_media_id' => 'getBackgroundMediaId',
        'background_media_mode' => 'getBackgroundMediaMode',
        'css_class' => 'getCssClass',
        'page_id' => 'getPageId',
        'custom_fields' => 'getCustomFields',
        'version_id' => 'getVersionId',
        'cms_page_version_id' => 'getCmsPageVersionId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'page' => 'getPage',
        'background_media' => 'getBackgroundMedia',
        'blocks' => 'getBlocks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['position'] = $data['position'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['locked'] = $data['locked'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['sizing_mode'] = $data['sizing_mode'] ?? null;
        $this->container['mobile_behavior'] = $data['mobile_behavior'] ?? null;
        $this->container['background_color'] = $data['background_color'] ?? null;
        $this->container['background_media_id'] = $data['background_media_id'] ?? null;
        $this->container['background_media_mode'] = $data['background_media_mode'] ?? null;
        $this->container['css_class'] = $data['css_class'] ?? null;
        $this->container['page_id'] = $data['page_id'] ?? null;
        $this->container['custom_fields'] = $data['custom_fields'] ?? null;
        $this->container['version_id'] = $data['version_id'] ?? null;
        $this->container['cms_page_version_id'] = $data['cms_page_version_id'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['page'] = $data['page'] ?? null;
        $this->container['background_media'] = $data['background_media'] ?? null;
        $this->container['blocks'] = $data['blocks'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if (!is_null($this->container['background_media_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['background_media_id'])) {
            $invalidProperties[] = "invalid value for 'background_media_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if ($this->container['page_id'] === null) {
            $invalidProperties[] = "'page_id' can't be null";
        }
        if (!preg_match("/^[0-9a-f]{32}$/", $this->container['page_id'])) {
            $invalidProperties[] = "invalid value for 'page_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if (!is_null($this->container['version_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['version_id'])) {
            $invalidProperties[] = "invalid value for 'version_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if (!is_null($this->container['cms_page_version_id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['cms_page_version_id'])) {
            $invalidProperties[] = "invalid value for 'cms_page_version_id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && (!preg_match("/^[0-9a-f]{32}$/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling CmsSection., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool|null $locked locked
     *
     * @return self
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sizing_mode
     *
     * @return string|null
     */
    public function getSizingMode()
    {
        return $this->container['sizing_mode'];
    }

    /**
     * Sets sizing_mode
     *
     * @param string|null $sizing_mode sizing_mode
     *
     * @return self
     */
    public function setSizingMode($sizing_mode)
    {
        $this->container['sizing_mode'] = $sizing_mode;

        return $this;
    }

    /**
     * Gets mobile_behavior
     *
     * @return string|null
     */
    public function getMobileBehavior()
    {
        return $this->container['mobile_behavior'];
    }

    /**
     * Sets mobile_behavior
     *
     * @param string|null $mobile_behavior mobile_behavior
     *
     * @return self
     */
    public function setMobileBehavior($mobile_behavior)
    {
        $this->container['mobile_behavior'] = $mobile_behavior;

        return $this;
    }

    /**
     * Gets background_color
     *
     * @return string|null
     */
    public function getBackgroundColor()
    {
        return $this->container['background_color'];
    }

    /**
     * Sets background_color
     *
     * @param string|null $background_color background_color
     *
     * @return self
     */
    public function setBackgroundColor($background_color)
    {
        $this->container['background_color'] = $background_color;

        return $this;
    }

    /**
     * Gets background_media_id
     *
     * @return string|null
     */
    public function getBackgroundMediaId()
    {
        return $this->container['background_media_id'];
    }

    /**
     * Sets background_media_id
     *
     * @param string|null $background_media_id background_media_id
     *
     * @return self
     */
    public function setBackgroundMediaId($background_media_id)
    {

        if (!is_null($background_media_id) && (!preg_match("/^[0-9a-f]{32}$/", $background_media_id))) {
            throw new \InvalidArgumentException("invalid value for $background_media_id when calling CmsSection., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['background_media_id'] = $background_media_id;

        return $this;
    }

    /**
     * Gets background_media_mode
     *
     * @return string|null
     */
    public function getBackgroundMediaMode()
    {
        return $this->container['background_media_mode'];
    }

    /**
     * Sets background_media_mode
     *
     * @param string|null $background_media_mode background_media_mode
     *
     * @return self
     */
    public function setBackgroundMediaMode($background_media_mode)
    {
        $this->container['background_media_mode'] = $background_media_mode;

        return $this;
    }

    /**
     * Gets css_class
     *
     * @return string|null
     */
    public function getCssClass()
    {
        return $this->container['css_class'];
    }

    /**
     * Sets css_class
     *
     * @param string|null $css_class css_class
     *
     * @return self
     */
    public function setCssClass($css_class)
    {
        $this->container['css_class'] = $css_class;

        return $this;
    }

    /**
     * Gets page_id
     *
     * @return string
     */
    public function getPageId()
    {
        return $this->container['page_id'];
    }

    /**
     * Sets page_id
     *
     * @param string $page_id page_id
     *
     * @return self
     */
    public function setPageId($page_id)
    {

        if ((!preg_match("/^[0-9a-f]{32}$/", $page_id))) {
            throw new \InvalidArgumentException("invalid value for $page_id when calling CmsSection., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['page_id'] = $page_id;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets version_id
     *
     * @return string|null
     */
    public function getVersionId()
    {
        return $this->container['version_id'];
    }

    /**
     * Sets version_id
     *
     * @param string|null $version_id version_id
     *
     * @return self
     */
    public function setVersionId($version_id)
    {

        if (!is_null($version_id) && (!preg_match("/^[0-9a-f]{32}$/", $version_id))) {
            throw new \InvalidArgumentException("invalid value for $version_id when calling CmsSection., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['version_id'] = $version_id;

        return $this;
    }

    /**
     * Gets cms_page_version_id
     *
     * @return string|null
     */
    public function getCmsPageVersionId()
    {
        return $this->container['cms_page_version_id'];
    }

    /**
     * Sets cms_page_version_id
     *
     * @param string|null $cms_page_version_id cms_page_version_id
     *
     * @return self
     */
    public function setCmsPageVersionId($cms_page_version_id)
    {

        if (!is_null($cms_page_version_id) && (!preg_match("/^[0-9a-f]{32}$/", $cms_page_version_id))) {
            throw new \InvalidArgumentException("invalid value for $cms_page_version_id when calling CmsSection., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['cms_page_version_id'] = $cms_page_version_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets page
     *
     * @return \OpenAPI\Client\Model\CmsPage|null
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param \OpenAPI\Client\Model\CmsPage|null $page page
     *
     * @return self
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets background_media
     *
     * @return \OpenAPI\Client\Model\Media|null
     */
    public function getBackgroundMedia()
    {
        return $this->container['background_media'];
    }

    /**
     * Sets background_media
     *
     * @param \OpenAPI\Client\Model\Media|null $background_media background_media
     *
     * @return self
     */
    public function setBackgroundMedia($background_media)
    {
        $this->container['background_media'] = $background_media;

        return $this;
    }

    /**
     * Gets blocks
     *
     * @return \OpenAPI\Client\Model\CmsBlock|null
     */
    public function getBlocks()
    {
        return $this->container['blocks'];
    }

    /**
     * Sets blocks
     *
     * @param \OpenAPI\Client\Model\CmsBlock|null $blocks blocks
     *
     * @return self
     */
    public function setBlocks($blocks)
    {
        $this->container['blocks'] = $blocks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


