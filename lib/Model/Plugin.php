<?php
/**
 * Plugin
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * The version of the OpenAPI document: 6.4.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Plugin Class Doc Comment
 *
 * @category Class
 * @description Added since version: 6.0.0.0
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Plugin implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Plugin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'base_class' => 'string',
        'name' => 'string',
        'composer_name' => 'string',
        'autoload' => 'object',
        'active' => 'bool',
        'managed_by_composer' => 'bool',
        'path' => 'string',
        'author' => 'string',
        'copyright' => 'string',
        'license' => 'string',
        'version' => 'string',
        'upgrade_version' => 'string',
        'installed_at' => '\DateTime',
        'upgraded_at' => '\DateTime',
        'icon' => 'string',
        'label' => 'string',
        'description' => 'string',
        'manufacturer_link' => 'string',
        'support_link' => 'string',
        'changelog' => 'object',
        'custom_fields' => 'object',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'translated' => 'object',
        'payment_methods' => '\OpenAPI\Client\Model\PaymentMethod'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'base_class' => null,
        'name' => null,
        'composer_name' => null,
        'autoload' => null,
        'active' => null,
        'managed_by_composer' => null,
        'path' => null,
        'author' => null,
        'copyright' => null,
        'license' => null,
        'version' => null,
        'upgrade_version' => null,
        'installed_at' => 'date-time',
        'upgraded_at' => 'date-time',
        'icon' => null,
        'label' => null,
        'description' => null,
        'manufacturer_link' => null,
        'support_link' => null,
        'changelog' => null,
        'custom_fields' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'translated' => null,
        'payment_methods' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'base_class' => 'baseClass',
        'name' => 'name',
        'composer_name' => 'composerName',
        'autoload' => 'autoload',
        'active' => 'active',
        'managed_by_composer' => 'managedByComposer',
        'path' => 'path',
        'author' => 'author',
        'copyright' => 'copyright',
        'license' => 'license',
        'version' => 'version',
        'upgrade_version' => 'upgradeVersion',
        'installed_at' => 'installedAt',
        'upgraded_at' => 'upgradedAt',
        'icon' => 'icon',
        'label' => 'label',
        'description' => 'description',
        'manufacturer_link' => 'manufacturerLink',
        'support_link' => 'supportLink',
        'changelog' => 'changelog',
        'custom_fields' => 'customFields',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'translated' => 'translated',
        'payment_methods' => 'paymentMethods'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'base_class' => 'setBaseClass',
        'name' => 'setName',
        'composer_name' => 'setComposerName',
        'autoload' => 'setAutoload',
        'active' => 'setActive',
        'managed_by_composer' => 'setManagedByComposer',
        'path' => 'setPath',
        'author' => 'setAuthor',
        'copyright' => 'setCopyright',
        'license' => 'setLicense',
        'version' => 'setVersion',
        'upgrade_version' => 'setUpgradeVersion',
        'installed_at' => 'setInstalledAt',
        'upgraded_at' => 'setUpgradedAt',
        'icon' => 'setIcon',
        'label' => 'setLabel',
        'description' => 'setDescription',
        'manufacturer_link' => 'setManufacturerLink',
        'support_link' => 'setSupportLink',
        'changelog' => 'setChangelog',
        'custom_fields' => 'setCustomFields',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'translated' => 'setTranslated',
        'payment_methods' => 'setPaymentMethods'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'base_class' => 'getBaseClass',
        'name' => 'getName',
        'composer_name' => 'getComposerName',
        'autoload' => 'getAutoload',
        'active' => 'getActive',
        'managed_by_composer' => 'getManagedByComposer',
        'path' => 'getPath',
        'author' => 'getAuthor',
        'copyright' => 'getCopyright',
        'license' => 'getLicense',
        'version' => 'getVersion',
        'upgrade_version' => 'getUpgradeVersion',
        'installed_at' => 'getInstalledAt',
        'upgraded_at' => 'getUpgradedAt',
        'icon' => 'getIcon',
        'label' => 'getLabel',
        'description' => 'getDescription',
        'manufacturer_link' => 'getManufacturerLink',
        'support_link' => 'getSupportLink',
        'changelog' => 'getChangelog',
        'custom_fields' => 'getCustomFields',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'translated' => 'getTranslated',
        'payment_methods' => 'getPaymentMethods'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['base_class'] = $data['base_class'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['composer_name'] = $data['composer_name'] ?? null;
        $this->container['autoload'] = $data['autoload'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['managed_by_composer'] = $data['managed_by_composer'] ?? null;
        $this->container['path'] = $data['path'] ?? null;
        $this->container['author'] = $data['author'] ?? null;
        $this->container['copyright'] = $data['copyright'] ?? null;
        $this->container['license'] = $data['license'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['upgrade_version'] = $data['upgrade_version'] ?? null;
        $this->container['installed_at'] = $data['installed_at'] ?? null;
        $this->container['upgraded_at'] = $data['upgraded_at'] ?? null;
        $this->container['icon'] = $data['icon'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['manufacturer_link'] = $data['manufacturer_link'] ?? null;
        $this->container['support_link'] = $data['support_link'] ?? null;
        $this->container['changelog'] = $data['changelog'] ?? null;
        $this->container['custom_fields'] = $data['custom_fields'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['translated'] = $data['translated'] ?? null;
        $this->container['payment_methods'] = $data['payment_methods'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && !preg_match("/^[0-9a-f]{32}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[0-9a-f]{32}$/.";
        }

        if ($this->container['base_class'] === null) {
            $invalidProperties[] = "'base_class' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['autoload'] === null) {
            $invalidProperties[] = "'autoload' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && (!preg_match("/^[0-9a-f]{32}$/", $id))) {
            throw new \InvalidArgumentException("invalid value for $id when calling Plugin., must conform to the pattern /^[0-9a-f]{32}$/.");
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets base_class
     *
     * @return string
     */
    public function getBaseClass()
    {
        return $this->container['base_class'];
    }

    /**
     * Sets base_class
     *
     * @param string $base_class base_class
     *
     * @return self
     */
    public function setBaseClass($base_class)
    {
        $this->container['base_class'] = $base_class;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets composer_name
     *
     * @return string|null
     */
    public function getComposerName()
    {
        return $this->container['composer_name'];
    }

    /**
     * Sets composer_name
     *
     * @param string|null $composer_name composer_name
     *
     * @return self
     */
    public function setComposerName($composer_name)
    {
        $this->container['composer_name'] = $composer_name;

        return $this;
    }

    /**
     * Gets autoload
     *
     * @return object
     */
    public function getAutoload()
    {
        return $this->container['autoload'];
    }

    /**
     * Sets autoload
     *
     * @param object $autoload autoload
     *
     * @return self
     */
    public function setAutoload($autoload)
    {
        $this->container['autoload'] = $autoload;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets managed_by_composer
     *
     * @return bool|null
     */
    public function getManagedByComposer()
    {
        return $this->container['managed_by_composer'];
    }

    /**
     * Sets managed_by_composer
     *
     * @param bool|null $managed_by_composer managed_by_composer
     *
     * @return self
     */
    public function setManagedByComposer($managed_by_composer)
    {
        $this->container['managed_by_composer'] = $managed_by_composer;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author author
     *
     * @return self
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets copyright
     *
     * @return string|null
     */
    public function getCopyright()
    {
        return $this->container['copyright'];
    }

    /**
     * Sets copyright
     *
     * @param string|null $copyright copyright
     *
     * @return self
     */
    public function setCopyright($copyright)
    {
        $this->container['copyright'] = $copyright;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string|null
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string|null $license license
     *
     * @return self
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets upgrade_version
     *
     * @return string|null
     */
    public function getUpgradeVersion()
    {
        return $this->container['upgrade_version'];
    }

    /**
     * Sets upgrade_version
     *
     * @param string|null $upgrade_version upgrade_version
     *
     * @return self
     */
    public function setUpgradeVersion($upgrade_version)
    {
        $this->container['upgrade_version'] = $upgrade_version;

        return $this;
    }

    /**
     * Gets installed_at
     *
     * @return \DateTime|null
     */
    public function getInstalledAt()
    {
        return $this->container['installed_at'];
    }

    /**
     * Sets installed_at
     *
     * @param \DateTime|null $installed_at installed_at
     *
     * @return self
     */
    public function setInstalledAt($installed_at)
    {
        $this->container['installed_at'] = $installed_at;

        return $this;
    }

    /**
     * Gets upgraded_at
     *
     * @return \DateTime|null
     */
    public function getUpgradedAt()
    {
        return $this->container['upgraded_at'];
    }

    /**
     * Sets upgraded_at
     *
     * @param \DateTime|null $upgraded_at upgraded_at
     *
     * @return self
     */
    public function setUpgradedAt($upgraded_at)
    {
        $this->container['upgraded_at'] = $upgraded_at;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets manufacturer_link
     *
     * @return string|null
     */
    public function getManufacturerLink()
    {
        return $this->container['manufacturer_link'];
    }

    /**
     * Sets manufacturer_link
     *
     * @param string|null $manufacturer_link manufacturer_link
     *
     * @return self
     */
    public function setManufacturerLink($manufacturer_link)
    {
        $this->container['manufacturer_link'] = $manufacturer_link;

        return $this;
    }

    /**
     * Gets support_link
     *
     * @return string|null
     */
    public function getSupportLink()
    {
        return $this->container['support_link'];
    }

    /**
     * Sets support_link
     *
     * @param string|null $support_link support_link
     *
     * @return self
     */
    public function setSupportLink($support_link)
    {
        $this->container['support_link'] = $support_link;

        return $this;
    }

    /**
     * Gets changelog
     *
     * @return object|null
     */
    public function getChangelog()
    {
        return $this->container['changelog'];
    }

    /**
     * Sets changelog
     *
     * @param object|null $changelog changelog
     *
     * @return self
     */
    public function setChangelog($changelog)
    {
        $this->container['changelog'] = $changelog;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets translated
     *
     * @return object|null
     */
    public function getTranslated()
    {
        return $this->container['translated'];
    }

    /**
     * Sets translated
     *
     * @param object|null $translated translated
     *
     * @return self
     */
    public function setTranslated($translated)
    {
        $this->container['translated'] = $translated;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return \OpenAPI\Client\Model\PaymentMethod|null
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param \OpenAPI\Client\Model\PaymentMethod|null $payment_methods payment_methods
     *
     * @return self
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


